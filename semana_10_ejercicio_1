#include<stdlib.h>
#include<stdio.h>
#include<iostream>
#define TRUE 1
#define FALSE 0
using namespace std;
typedef struct _nodo{
	int dato;
	struct _nodo *derecho;
	struct _nodo *izquierdo;
} tipoNodo;

typedef tipoNodo *pNodo;
typedef tipoNodo *Arbol;
void Insertar(Arbol *a, int dat);
//Funcion de busqueda

int Vacio(Arbol r);
//Comprobar si es un nodo hoja

int EsHoja(pNodo r);

//Aplicar una funcion a cada elemento del arbol
void InOrden(Arbol, void(*func)(int*));

void Mostrar(int *d);

main(){
	Arbol ArbolInt=NULL;
	int altura;
	int nnodos;
	
	//Insercion de nodos en arbol:
	Insertar(&ArbolInt, 10);
	Insertar(&ArbolInt, 5);
	Insertar(&ArbolInt, 12);
	Insertar(&ArbolInt, 4);
	Insertar(&ArbolInt, 7);
	Insertar(&ArbolInt, 3);
	Insertar(&ArbolInt, 6);
	Insertar(&ArbolInt, 9);
	Insertar(&ArbolInt, 8);
	Insertar(&ArbolInt, 11);
	Insertar(&ArbolInt, 14);
	Insertar(&ArbolInt, 13);
	Insertar(&ArbolInt, 2);
	Insertar(&ArbolInt, 1);
	Insertar(&ArbolInt, 15);
	Insertar(&ArbolInt, 10);
	Insertar(&ArbolInt, 17);
	Insertar(&ArbolInt, 18);
	Insertar(&ArbolInt, 16);
	
	//Mostrar el arbol en tres ordenes distintos:
	cout<<"InOrden: "<<endl;
	InOrden(ArbolInt, Mostrar);
}

//insertar un dato en el arbol ABB
void Insertar(Arbol *a, int dat){
	pNodo padre = NULL;
	pNodo actual = *a;
	
	//Buscar el  dato en el arbol, manteniendo un puntero al nodo padre
	while(!Vacio(actual)&& dat != actual->dato){
		padre = actual;
		if(dat<actual->dato) actual = actual->izquierdo;
		else if(dat>actual->dato) actual = actual->derecho;
	}
	
	if(!Vacio(actual)) return;
	//Si paadre es NULL entonces el arbol estaba vacio, el nuevo nodo sera el nodo raiz
	if(Vacio(padre)){
		*a = (Arbol)malloc(sizeof(tipoNodo));
		(*a)->dato = dat;
		(*a)->izquierdo = (*a)->derecho = NULL;
	}
	else if(dat <padre->dato){
		actual = (Arbol)malloc(sizeof(tipoNodo));
		padre->izquierdo = actual;
		actual->dato = dat;
		actual->izquierdo = actual->derecho = NULL;
	}
	else if(dat >padre->dato){
		actual = (Arbol)malloc(sizeof(tipoNodo));
		padre->derecho = actual;
		actual->dato = dat;
		actual->izquierdo = actual->derecho = NULL;
	}
}

//Recorrido de arbol en inorden, aplicamos la funcion func, que tiene el prototipo:
//void func(int*);

void InOrden(Arbol a, void (*func)(int*)){
	if(a->izquierdo) InOrden(a->izquierdo,func);
	func(&(a->dato));
	if(a->derecho) InOrden(a->derecho, func);
}

//Comprobar si un arbol es vacio

int Vacio(Arbol r){
	return r ==NULL;
}

int EsHoja(pNodo r){
	return !r->derecho && !r->izquierdo;
}

void Mostrar(int *d){
	printf("%d, ",*d);
}
